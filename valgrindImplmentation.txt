***************************************Implementation**************************************************
prathamkumar@DESKTOP:~/hello$ ls
z.c
******************************************Code ********************************************************
#include<stdio.h>
int main(){
	printf("Hello World");
	return 0;
}
prathamkumar@DESKTOP:~/hello$ cd ..
prathamkumar@DESKTOP:~$ ls
hello
prathamkumar@DESKTOP:~$ cd hello
prathamkumar@DESKTOP:~/hello$ nano z.c
prathamkumar@DESKTOP:~/hello$ gcc z.c -o z.out
prathamkumar@DESKTOP:~/hello$ ./z.out

Hello World

prathamkumar@DESKTOP:~/hello$ nano z.c
prathamkumar@DESKTOP:~/hello$ ./z.out

Hello World

prathamkumar@DESKTOP:~/hello$ valgrind ./z.out

==1957== Memcheck, a memory error detector
==1957== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1957== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1957== Command: ./z.out
==1957==
Hello World==1957==
==1957== HEAP SUMMARY:
==1957==     in use at exit: 0 bytes in 0 blocks
==1957==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==1957==
==1957== All heap blocks were freed -- no leaks are possible
==1957==
==1957== For lists of detected and suppressed errors, rerun with: -s
==1957== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
prathamkumar@DESKTOP:~/hello$nano z.c

*************************************Allocated Memory Dynamically***************************************
  GNU nano 6.2                                       z.c *        
                                      
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main(){
        char* str = malloc(20);//Here
        strcpy(str,"Hello");
        printf("%s\n",str);
        return 0;
}

prathamkumar@DESKTOP:~/hello$ gcc z.c -o z.out
prathamkumar@DESKTOP:~/hello$ valgrind ./z.out

==1983== Memcheck, a memory error detector
==1983== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1983== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1983== Command: ./z.out
==1983==
Hello
==1983==
==1983== HEAP SUMMARY:
==1983==     in use at exit: 20 bytes in 1 blocks
==1983==   total heap usage: 2 allocs, 1 frees, 1,044 bytes allocated//*******************************
==1983==
==1983== LEAK SUMMARY:
==1983==    definitely lost: 20 bytes in 1 blocks
==1983==    indirectly lost: 0 bytes in 0 blocks
==1983==      possibly lost: 0 bytes in 0 blocks
==1983==    still reachable: 0 bytes in 0 blocks
==1983==         suppressed: 0 bytes in 0 blocks
==1983== Rerun with --leak-check=full to see details of leaked memory
==1983==
==1983== For lists of detected and suppressed errors, rerun with: -s
==1983== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

*************************************Free Memory*****************************************************

  GNU nano 6.2                                       z.c *                                              
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main(){
        char* str = malloc(20);
        strcpy(str,"Hello");
        printf("%s\n",str);
        free(str);
        return 0;
}

prathamkumar@DESKTOP:~/hello$ gcc z.c -o z.out
prathamkumar@DESKTOP:~/hello$ valgrind ./z.out

==1992== Memcheck, a memory error detector
==1992== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1992== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1992== Command: ./z.out
==1992==
Hello
==1992==
==1992== HEAP SUMMARY:
==1992==     in use at exit: 0 bytes in 0 blocks
==1992==   total heap usage: 2 allocs, 2 frees, 1,044 bytes allocated//*********************************
==1992==
==1992== All heap blocks were freed -- no leaks are possible
==1992==
==1992== For lists of detected and suppressed errors, rerun with: -s
==1992== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

 
***************************************Again Changes made in Code***************************************

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main(){
        char* str = malloc(20);
        strcpy(str,"Hello");
        printf("%s\n",str);
        free(str);

        FILE *f_ptr =fopen("text.txt","w");
        fprintf(f_ptr,"%s","Hello World!");

        return 0;
}

prathamkumar@DESKTOP:~/hello$ gcc z.c -o z.out
prathamkumar@DESKTOP:~/hello$ valgrind -s --leak-check=full ./z.out
==2007== Memcheck, a memory error detector
==2007== Copyright (C) 2002-2017.
==2007== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2007== Command: ./z.out
==2007==
Hello
==2007==
==2007== HEAP SUMMARY:
==2007==     in use at exit: 472 bytes in 1 blocks
==2007==   total heap usage: 4 allocs, 3 frees, 5,612 bytes allocated
==2007==
==2007== LEAK SUMMARY:
==2007==    definitely lost: 0 bytes in 0 blocks
==2007==    indirectly lost: 0 bytes in 0 blocks
==2007==      possibly lost: 0 bytes in 0 blocks
==2007==    still reachable: 472 bytes in 1 blocks
==2007==         suppressed: 0 bytes in 0 blocks
==2007== Reachable blocks (those to which a pointer was found) are not shown.
==2007== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2007==
==2007== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

***************************************Closing the file***************************************************
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main(){
        char* str = malloc(20);
        strcpy(str,"Hello");
        printf("%s\n",str);
        free(str);
        FILE *f_ptr =fopen("text.txt","w");
        fprintf(f_ptr,"%s","Hello World!");
        fclose(f_ptr);//*********************************
        return 0;
}

prathamkumar@DESKTOP:~/hello$ gcc z.c -o z.out
prathamkumar@DESKTOP:~/hello$ valgrind -s --leak-check=full ./z.out
==2043== Memcheck, a memory error detector
==2043== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2043== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2043== Command: ./z.out
==2043==
Hello
==2043==
==2043== HEAP SUMMARY:
==2043==     in use at exit: 0 bytes in 0 blocks
==2043==   total heap usage: 4 allocs, 4 frees, 5,612 bytes allocated//******************
==2043==
==2043== All heap blocks were freed -- no leaks are possible
==2043==
==2043== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)











